(()=>{"use strict";var e={28:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(537),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([e.id,"body {\n  margin: 0;\n  padding: 0;\n}\n\n.container {\n  margin-left: 150px;\n  margin-top: 100px;\n}\n\n.text-title {\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 20px;\n}\n\n.description {\n  padding-left: 10px;\n}\n\n.checked {\n  text-decoration: line-through;\n  color: rgb(15, 146, 179);\n}\n\n.list-group-item {\n  list-style-type: none;\n  border: 3px solid rgb(233, 224, 224);\n  margin-left: -40px;\n}\n\n.list-todo {\n  display: flex;\n  margin: 15px 15px;\n  justify-content: space-between;\n  align-content: center;\n}\n\n.card {\n  border: 3px solid rgb(233, 224, 224);\n  width: 50%;\n  background-color: antiquewhite;\n  padding: 1px 20px;\n}\n\n.group-items {\n  display: flex;\n}\n\n.fas {\n  font-weight: 900;\n  align-self: flex-end;\n}\n\n.form-control {\n  border: 10px solid white;\n  padding: 1px 245px;\n  text-align: start;\n}\n\n.btn-clear1 {\n  border: 5px solid rgb(57, 57, 59);\n  font-weight: bold;\n  padding: 8px 280px;\n  background-color: blue;\n  color: aliceblue;\n}\n","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA;EACE,yCAAyC;EACzC,eAAe;AACjB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,6BAA6B;EAC7B,wBAAwB;AAC1B;;AAEA;EACE,qBAAqB;EACrB,oCAAoC;EACpC,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,iBAAiB;EACjB,8BAA8B;EAC9B,qBAAqB;AACvB;;AAEA;EACE,oCAAoC;EACpC,UAAU;EACV,8BAA8B;EAC9B,iBAAiB;AACnB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,gBAAgB;EAChB,oBAAoB;AACtB;;AAEA;EACE,wBAAwB;EACxB,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA;EACE,iCAAiC;EACjC,iBAAiB;EACjB,kBAAkB;EAClB,sBAAsB;EACtB,gBAAgB;AAClB",sourcesContent:["body {\n  margin: 0;\n  padding: 0;\n}\n\n.container {\n  margin-left: 150px;\n  margin-top: 100px;\n}\n\n.text-title {\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 20px;\n}\n\n.description {\n  padding-left: 10px;\n}\n\n.checked {\n  text-decoration: line-through;\n  color: rgb(15, 146, 179);\n}\n\n.list-group-item {\n  list-style-type: none;\n  border: 3px solid rgb(233, 224, 224);\n  margin-left: -40px;\n}\n\n.list-todo {\n  display: flex;\n  margin: 15px 15px;\n  justify-content: space-between;\n  align-content: center;\n}\n\n.card {\n  border: 3px solid rgb(233, 224, 224);\n  width: 50%;\n  background-color: antiquewhite;\n  padding: 1px 20px;\n}\n\n.group-items {\n  display: flex;\n}\n\n.fas {\n  font-weight: 900;\n  align-self: flex-end;\n}\n\n.form-control {\n  border: 10px solid white;\n  padding: 1px 245px;\n  text-align: start;\n}\n\n.btn-clear1 {\n  border: 5px solid rgb(57, 57, 59);\n  font-weight: bold;\n  padding: 8px 280px;\n  background-color: blue;\n  color: aliceblue;\n}\n"],sourceRoot:""}]);const c=a},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(a).concat([i]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},a=[],c=0;c<e.length;c++){var s=e[c],l=r.base?s[0]+r.base:s[0],d=i[l]||0,p="".concat(l," ").concat(d);i[l]=d+1;var A=t(p),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)n[A].references++,n[A].updater(u);else{var f=o(u,r);r.byIndex=c,n.splice(c,0,{identifier:p,updater:f,references:1})}a.push(p)}return a}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var c=t(i[a]);n[c].references--}for(var s=r(e,o),l=0;l<i.length;l++){var d=t(i[l]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}i=s}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n);var r={};(()=>{t.d(r,{a:()=>C,J:()=>h});var e=t(379),n=t.n(e),o=t(795),i=t.n(o),a=t(569),c=t.n(a),s=t(565),l=t.n(s),d=t(216),p=t.n(d),A=t(589),u=t.n(A),f=t(28),g={};g.styleTagTransform=u(),g.setAttributes=l(),g.insert=c().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=p(),n()(f.Z,g),f.Z&&f.Z.locals&&f.Z.locals;const m=e=>{h=h.filter((n=>n.index!==Number(e.target.parentElement.id-1)));for(let e=0;e<h.length;e+=1)h[e].index=e+1;C(h),localStorage.setItem("stock",JSON.stringify(h))},E=document.querySelector("#todoList"),x=document.querySelector("#inputFaild"),v=document.querySelector("#clearAllToDo");let h=JSON.parse(localStorage.getItem("stock"))||[];function C(e){null!==e&&e.forEach((e=>{const n=document.createElement("li");n.classList.add("list-group-item");const t=`<div class="list-todo" id="${e.index+1}">\n      <div class="group-items" id="${e.index}">\n    <input class="form-check-input" type="checkbox" value="" ${e.completed?"checked":""} id="defaultCheck1"/>\n          <div class="description ${e.completed?"checked":""}" contenteditable="${!e.completed}">${e.description}</div>\n          </div>\n          <i class="fas fa-trash delete"></i>\n       </div>`;n.innerHTML=t,E.appendChild(n)})),document.querySelectorAll("#defaultCheck1").forEach((e=>{e.addEventListener("change",(e=>{(e=>{const n=localStorage.getItem("stock"),t=JSON.parse(n),r=t.find((n=>n.index===Number(e.target.parentElement.id))),o=t.indexOf(r);t[o].completed?(t[o].completed=0,e.target.parentElement.children[1].classList.remove("checked"),localStorage.setItem("stock",JSON.stringify(t))):(t[o].completed=1,e.target.parentElement.children[1].classList.add("checked"),localStorage.setItem("stock",JSON.stringify(t)))})(e)}))})),document.querySelectorAll(".description").forEach((e=>{e.addEventListener("keypress",(e=>{"Enter"===e.key&&(e.preventDefault(),(e=>{const n=localStorage.getItem("stock"),t=JSON.parse(n),r=t.find((n=>n.index===Number(e.target.parentElement.id))),o=t.indexOf(r);t[o].description=e.target.textContent,localStorage.setItem("stock",JSON.stringify(t))})(e))}))})),document.querySelectorAll(".delete").forEach((e=>{e.addEventListener("click",(e=>{E.innerHTML="",m(e)}))}))}x.addEventListener("keypress",(e=>{"Enter"===e.key&&x.value&&(E.innerHTML="",((e,n)=>{e.push({description:n,completed:0,index:e.length+1}),C(e),localStorage.setItem("stock",JSON.stringify(e))})(h,x.value),x.value="")})),v.addEventListener("click",(()=>{E.innerHTML="",(()=>{let e=JSON.parse(localStorage.getItem("stock"));e=e.filter((e=>1!==e.completed));for(let n=0;n<e.length;n+=1)e[n].index=n+1;C(e),localStorage.setItem("stock",JSON.stringify(e))})()})),window.addEventListener("load",(()=>{const e=localStorage.getItem("stock"),n=JSON.parse(e);C(n),console.log(n)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,